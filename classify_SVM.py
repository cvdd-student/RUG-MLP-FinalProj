import collect_and_process
from sklearn_svm_classifier import SVMClassifier
from sklearn import metrics


def evaluate(true_labels, predicted_labels):
    """
    Print accuracy, precision, recall and f1 metrics for each class, and their macro average.
    """

    # Use confusion matrix generated by the provided function
    # to calculate evaluation metrics.
    confusion_matrix = metrics.confusion_matrix(y_true=true_labels, y_pred=predicted_labels)

    accuracy = metrics.accuracy_score(y_true=true_labels, y_pred=predicted_labels)
    precision = metrics.precision_score(y_true=true_labels, y_pred=predicted_labels, average='macro')
    recall = metrics.recall_score(y_true=true_labels, y_pred=predicted_labels, average='macro')
    f1score = metrics.f1_score(y_true=true_labels, y_pred=predicted_labels, average='macro')

    print('***** Evaluation *****')
    print("Accuracy: " + str(accuracy))
    print("Precision: " + str(precision))
    print("Recall: " + str(recall))
    print("F1: " + str(f1score))
    print("\nConfusion matrix:\n" + str(confusion_matrix))


def train_cls(train_items, train_labels, test_items):
    cls = SVMClassifier(kernel='linear')
    feats_vocab = cls.get_feature_vocab(train_items, 1)
    train_feats = cls.get_features(train_items, feats_vocab, 1)
    test_feats = cls.get_features(test_items, feats_vocab, 1)
    print("Training model...")
    cls.fit(train_feats, train_labels)
    print("OK")

    return cls, test_feats

def main():
    data = collect_and_process.get_data()
    tr_items, tr_labels, te_items, te_labels = collect_and_process.collect_and_process(data)
    cls, te_feats = train_cls(tr_items, tr_labels, te_items)
    pred_labels = cls.predict(te_feats)
    evaluate(te_labels, pred_labels)


if __name__ == "__main__":
    main()
